package concretecode;
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE 1.20.2.4305 modeling language!*/


import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

// line 227 "gameplotconcrete.ump"
public class SolidLine extends Shape
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //SolidLine Attributes
  private Color aColor;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public SolidLine(int aLeft, int aTop, int aWidth, int aHeight)
  {
    super(aLeft, aTop, aWidth, aHeight);
    aColor = Color.black;
  }

  //------------------------
  // INTERFACE
  //------------------------

  public boolean setAColor(Color aAColor)
  {
    boolean wasSet = false;
    aColor = aAColor;
    wasSet = true;
    return wasSet;
  }

  public Color getAColor()
  {
    return aColor;
  }

  public void delete()
  {
    super.delete();
  }
  
  @Override
  public void draw(Graphics g){
	  Graphics2D g2 = (Graphics2D) g.create();
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
      g2.setColor(Color.BLACK);
      g2.setStroke(new BasicStroke(8));
	  g2.drawLine(this.getLeft(),this.getTop(),this.getWidth(),this.getHeight());
  }
  
  @Override
  public boolean containsPoint(int x, int y){
	    // Check whether (x,y) is inside this oval, using the
		// mathematical equation of an ellipse.
		double rx = this.getWidth()/2.0;   // horizontal radius of ellipse
		double ry = this.getHeight()/2.0;  // vertical radius of ellipse 
		double cx = this.getLeft() + rx;   // x-coord of center of ellipse
		double cy = this.getTop() + ry;    // y-coord of center of ellipse
		if ( (ry*(x-cx))*(ry*(x-cx)) + (rx*(y-cy))*(rx*(y-cy)) <= rx*rx*ry*ry )
			return true;
		else
			return false;
	  }

  public String toString()
  {
	  String outputString = "";
    return super.toString() + "["+ "]" + System.getProperties().getProperty("line.separator") +
            "  " + "aColor" + "=" + (getAColor() != null ? !getAColor().equals(this)  ? getAColor().toString().replaceAll("  ","    ") : "this" : "null")
     + outputString;
  }
}